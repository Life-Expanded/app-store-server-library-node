"use strict";
// Copyright (c) 2023 Apple Inc. Licensed under MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.HistoryResponseValidator = void 0;
const Environment_1 = require("./Environment");
class HistoryResponseValidator {
    validate(obj) {
        if ((typeof obj['revision'] !== 'undefined') && !(typeof obj['revision'] === "string" || obj['revision'] instanceof String)) {
            return false;
        }
        if ((typeof obj['hasMore'] !== 'undefined') && !(typeof obj['hasMore'] === "boolean" || obj['hasMore'] instanceof Boolean)) {
            return false;
        }
        if ((typeof obj['bundleId'] !== 'undefined') && !(typeof obj['bundleId'] === "string" || obj['bundleId'] instanceof String)) {
            return false;
        }
        if ((typeof obj['appAppleId'] !== 'undefined') && !(typeof obj['appAppleId'] === "number")) {
            return false;
        }
        if ((typeof obj['environment'] !== 'undefined') && !(HistoryResponseValidator.environmentValidator.validate(obj['environment']))) {
            return false;
        }
        if (typeof obj['signedTransactions'] !== 'undefined') {
            if (!Array.isArray(obj['signedTransactions'])) {
                return false;
            }
            for (const signedTransaction of obj['signedTransactions']) {
                if (!(typeof signedTransaction === "string" || signedTransaction instanceof String)) {
                    return false;
                }
            }
        }
        return true;
    }
}
exports.HistoryResponseValidator = HistoryResponseValidator;
HistoryResponseValidator.environmentValidator = new Environment_1.EnvironmentValidator();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGlzdG9yeVJlc3BvbnNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbW9kZWxzL0hpc3RvcnlSZXNwb25zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNERBQTREOzs7QUFFNUQsK0NBQWtFO0FBcURsRSxNQUFhLHdCQUF3QjtJQUVqQyxRQUFRLENBQUMsR0FBUTtRQUNiLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssUUFBUSxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsWUFBWSxNQUFNLENBQUMsRUFBRTtZQUN6SCxPQUFPLEtBQUssQ0FBQTtTQUNmO1FBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxTQUFTLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxZQUFZLE9BQU8sQ0FBQyxFQUFFO1lBQ3hILE9BQU8sS0FBSyxDQUFBO1NBQ2Y7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLFFBQVEsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLFlBQVksTUFBTSxDQUFDLEVBQUU7WUFDekgsT0FBTyxLQUFLLENBQUE7U0FDZjtRQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssUUFBUSxDQUFDLEVBQUU7WUFDeEYsT0FBTyxLQUFLLENBQUE7U0FDZjtRQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxhQUFhLENBQUMsS0FBSyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsd0JBQXdCLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDOUgsT0FBTyxLQUFLLENBQUE7U0FDZjtRQUNELElBQUksT0FBTyxHQUFHLENBQUMsb0JBQW9CLENBQUMsS0FBSyxXQUFXLEVBQUU7WUFDbEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUMsRUFBRTtnQkFDM0MsT0FBTyxLQUFLLENBQUE7YUFDZjtZQUNELEtBQUssTUFBTSxpQkFBaUIsSUFBSSxHQUFHLENBQUMsb0JBQW9CLENBQUMsRUFBRTtnQkFDdkQsSUFBSSxDQUFDLENBQUMsT0FBTyxpQkFBaUIsS0FBSyxRQUFRLElBQUksaUJBQWlCLFlBQVksTUFBTSxDQUFDLEVBQUU7b0JBQ2pGLE9BQU8sS0FBSyxDQUFBO2lCQUNmO2FBQ0o7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFBO0lBQ2YsQ0FBQzs7QUE3QkwsNERBOEJDO0FBN0JtQiw2Q0FBb0IsR0FBRyxJQUFJLGtDQUFvQixFQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMjMgQXBwbGUgSW5jLiBMaWNlbnNlZCB1bmRlciBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHsgRW52aXJvbm1lbnQsIEVudmlyb25tZW50VmFsaWRhdG9yIH0gZnJvbSBcIi4vRW52aXJvbm1lbnRcIjtcbmltcG9ydCB7IFZhbGlkYXRvciB9IGZyb20gXCIuL1ZhbGlkYXRvclwiO1xuXG4vKipcbiAqIEEgcmVzcG9uc2UgdGhhdCBjb250YWlucyB0aGUgY3VzdG9tZXLigJlzIHRyYW5zYWN0aW9uIGhpc3RvcnkgZm9yIGFuIGFwcC5cbiAqXG4gKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vYXBwc3RvcmVzZXJ2ZXJhcGkvaGlzdG9yeXJlc3BvbnNlIEhpc3RvcnlSZXNwb25zZX1cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBIaXN0b3J5UmVzcG9uc2Uge1xuICAgIC8qKlxuICAgICAqIEEgdG9rZW4geW91IHVzZSBpbiBhIHF1ZXJ5IHRvIHJlcXVlc3QgdGhlIG5leHQgc2V0IG9mIHRyYW5zYWN0aW9ucyBmb3IgdGhlIGN1c3RvbWVyLlxuICAgICAqXG4gICAgICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL2FwcHN0b3Jlc2VydmVyYXBpL3JldmlzaW9uIHJldmlzaW9ufVxuICAgICAqKi9cbiAgICByZXZpc2lvbj86IHN0cmluZ1xuICAgICAgICBcbiAgICAvKipcbiAgICAgKiBBIEJvb2xlYW4gdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBBcHAgU3RvcmUgaGFzIG1vcmUgdHJhbnNhY3Rpb24gZGF0YS5cbiAgICAgKlxuICAgICAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi9hcHBzdG9yZXNlcnZlcmFwaS9oYXNtb3JlIGhhc01vcmV9XG4gICAgICoqL1xuICAgIGhhc01vcmU/OiBib29sZWFuXG4gICAgICAgIFxuICAgIC8qKlxuICAgICAqIFRoZSBidW5kbGUgaWRlbnRpZmllciBvZiBhbiBhcHAuXG4gICAgICpcbiAgICAgKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vYXBwc3RvcmVzZXJ2ZXJhcGkvYnVuZGxlaWQgYnVuZGxlSWR9XG4gICAgICoqL1xuICAgIGJ1bmRsZUlkPzogc3RyaW5nXG4gICAgICAgIFxuICAgIC8qKlxuICAgICAqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiBhbiBhcHAgaW4gdGhlIEFwcCBTdG9yZS5cbiAgICAgKlxuICAgICAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi9hcHBzdG9yZXNlcnZlcm5vdGlmaWNhdGlvbnMvYXBwYXBwbGVpZCBhcHBBcHBsZUlkfVxuICAgICAqKi9cbiAgICBhcHBBcHBsZUlkPzogbnVtYmVyXG4gICAgICAgIFxuICAgIC8qKlxuICAgICAqIFRoZSBzZXJ2ZXIgZW52aXJvbm1lbnQgaW4gd2hpY2ggeW914oCZcmUgbWFraW5nIHRoZSByZXF1ZXN0LCB3aGV0aGVyIHNhbmRib3ggb3IgcHJvZHVjdGlvbi5cbiAgICAgKlxuICAgICAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi9hcHBzdG9yZXNlcnZlcmFwaS9lbnZpcm9ubWVudCBlbnZpcm9ubWVudH1cbiAgICAgKiovXG4gICAgZW52aXJvbm1lbnQ/OiBFbnZpcm9ubWVudFxuXG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgaW4tYXBwIHB1cmNoYXNlIHRyYW5zYWN0aW9ucyBmb3IgdGhlIGN1c3RvbWVyLCBzaWduZWQgYnkgQXBwbGUsIGluIEpTT04gV2ViIFNpZ25hdHVyZSBmb3JtYXQuXG4gICAgICpcbiAgICAgKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vYXBwc3RvcmVzZXJ2ZXJhcGkvandzdHJhbnNhY3Rpb24gSldTVHJhbnNhY3Rpb259XG4gICAgICoqL1xuICAgIHNpZ25lZFRyYW5zYWN0aW9ucz86IHN0cmluZ1tdO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBIaXN0b3J5UmVzcG9uc2VWYWxpZGF0b3IgaW1wbGVtZW50cyBWYWxpZGF0b3I8SGlzdG9yeVJlc3BvbnNlPiB7XG4gICAgc3RhdGljIHJlYWRvbmx5IGVudmlyb25tZW50VmFsaWRhdG9yID0gbmV3IEVudmlyb25tZW50VmFsaWRhdG9yKClcbiAgICB2YWxpZGF0ZShvYmo6IGFueSk6IG9iaiBpcyBIaXN0b3J5UmVzcG9uc2Uge1xuICAgICAgICBpZiAoKHR5cGVvZiBvYmpbJ3JldmlzaW9uJ10gIT09ICd1bmRlZmluZWQnKSAmJiAhKHR5cGVvZiBvYmpbJ3JldmlzaW9uJ10gPT09IFwic3RyaW5nXCIgfHwgb2JqWydyZXZpc2lvbiddIGluc3RhbmNlb2YgU3RyaW5nKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh0eXBlb2Ygb2JqWydoYXNNb3JlJ10gIT09ICd1bmRlZmluZWQnKSAmJiAhKHR5cGVvZiBvYmpbJ2hhc01vcmUnXSA9PT0gXCJib29sZWFuXCIgfHwgb2JqWydoYXNNb3JlJ10gaW5zdGFuY2VvZiBCb29sZWFuKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh0eXBlb2Ygb2JqWydidW5kbGVJZCddICE9PSAndW5kZWZpbmVkJykgJiYgISh0eXBlb2Ygb2JqWydidW5kbGVJZCddID09PSBcInN0cmluZ1wiIHx8IG9ialsnYnVuZGxlSWQnXSBpbnN0YW5jZW9mIFN0cmluZykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIGlmICgodHlwZW9mIG9ialsnYXBwQXBwbGVJZCddICE9PSAndW5kZWZpbmVkJykgJiYgISh0eXBlb2Ygb2JqWydhcHBBcHBsZUlkJ10gPT09IFwibnVtYmVyXCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHR5cGVvZiBvYmpbJ2Vudmlyb25tZW50J10gIT09ICd1bmRlZmluZWQnKSAmJiAhKEhpc3RvcnlSZXNwb25zZVZhbGlkYXRvci5lbnZpcm9ubWVudFZhbGlkYXRvci52YWxpZGF0ZShvYmpbJ2Vudmlyb25tZW50J10pKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBvYmpbJ3NpZ25lZFRyYW5zYWN0aW9ucyddICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG9ialsnc2lnbmVkVHJhbnNhY3Rpb25zJ10pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNpZ25lZFRyYW5zYWN0aW9uIG9mIG9ialsnc2lnbmVkVHJhbnNhY3Rpb25zJ10pIHtcbiAgICAgICAgICAgICAgICBpZiAoISh0eXBlb2Ygc2lnbmVkVHJhbnNhY3Rpb24gPT09IFwic3RyaW5nXCIgfHwgc2lnbmVkVHJhbnNhY3Rpb24gaW5zdGFuY2VvZiBTdHJpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbn1cbiJdfQ==