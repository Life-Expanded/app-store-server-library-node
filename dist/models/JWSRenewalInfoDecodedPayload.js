"use strict";
// Copyright (c) 2023 Apple Inc. Licensed under MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.JWSRenewalInfoDecodedPayloadValidator = void 0;
const AutoRenewStatus_1 = require("./AutoRenewStatus");
const Environment_1 = require("./Environment");
const ExpirationIntent_1 = require("./ExpirationIntent");
const OfferType_1 = require("./OfferType");
const PriceIncreaseStatus_1 = require("./PriceIncreaseStatus");
class JWSRenewalInfoDecodedPayloadValidator {
    validate(obj) {
        if ((typeof obj['expirationIntent'] !== 'undefined') && !(JWSRenewalInfoDecodedPayloadValidator.expirationIntentValidator.validate(obj['expirationIntent']))) {
            return false;
        }
        if ((typeof obj['originalTransactionId'] !== 'undefined') && !(typeof obj['originalTransactionId'] === "string" || obj['originalTransactionId'] instanceof String)) {
            return false;
        }
        if ((typeof obj['autoRenewProductId'] !== 'undefined') && !(typeof obj['autoRenewProductId'] === "string" || obj['autoRenewProductId'] instanceof String)) {
            return false;
        }
        if ((typeof obj['productId'] !== 'undefined') && !(typeof obj['productId'] === "string" || obj['productId'] instanceof String)) {
            return false;
        }
        if ((typeof obj['autoRenewStatus'] !== 'undefined') && !(JWSRenewalInfoDecodedPayloadValidator.autoRenewStatusValidator.validate(obj['autoRenewStatus']))) {
            return false;
        }
        if ((typeof obj['isInBillingRetryPeriod'] !== 'undefined') && !(typeof obj['isInBillingRetryPeriod'] === "boolean" || obj['isInBillingRetryPeriod'] instanceof Boolean)) {
            return false;
        }
        if ((typeof obj['priceIncreaseStatus'] !== 'undefined') && !(JWSRenewalInfoDecodedPayloadValidator.priceIncreaseStatusValidator.validate(obj['priceIncreaseStatus']))) {
            return false;
        }
        if ((typeof obj['gracePeriodExpiresDate'] !== 'undefined') && !(typeof obj['gracePeriodExpiresDate'] === "number")) {
            return false;
        }
        if ((typeof obj['offerType'] !== 'undefined') && !(JWSRenewalInfoDecodedPayloadValidator.offerTypeValidator.validate(obj['offerType']))) {
            return false;
        }
        if ((typeof obj['offerIdentifier'] !== 'undefined') && !(typeof obj['offerIdentifier'] === "string" || obj['offerIdentifier'] instanceof String)) {
            return false;
        }
        if ((typeof obj['signedDate'] !== 'undefined') && !(typeof obj['signedDate'] === "number")) {
            return false;
        }
        if ((typeof obj['environment'] !== 'undefined') && !(JWSRenewalInfoDecodedPayloadValidator.environmentValidator.validate(obj['environment']))) {
            return false;
        }
        if ((typeof obj['recentSubscriptionStartDate'] !== 'undefined') && !(typeof obj['recentSubscriptionStartDate'] === 'number')) {
            return false;
        }
        if ((typeof obj['renewalDate'] !== 'undefined') && !(typeof obj['renewalDate'] === 'number')) {
            return false;
        }
        return true;
    }
}
exports.JWSRenewalInfoDecodedPayloadValidator = JWSRenewalInfoDecodedPayloadValidator;
JWSRenewalInfoDecodedPayloadValidator.environmentValidator = new Environment_1.EnvironmentValidator();
JWSRenewalInfoDecodedPayloadValidator.offerTypeValidator = new OfferType_1.OfferTypeValidator();
JWSRenewalInfoDecodedPayloadValidator.priceIncreaseStatusValidator = new PriceIncreaseStatus_1.PriceIncreaseStatusValidator();
JWSRenewalInfoDecodedPayloadValidator.autoRenewStatusValidator = new AutoRenewStatus_1.AutoRenewStatusValidator();
JWSRenewalInfoDecodedPayloadValidator.expirationIntentValidator = new ExpirationIntent_1.ExpirationIntentValidator();
//# sourceMappingURL=data:application/json;base64,