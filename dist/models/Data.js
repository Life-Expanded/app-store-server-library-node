"use strict";
// Copyright (c) 2023 Apple Inc. Licensed under MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataValidator = void 0;
const Environment_1 = require("./Environment");
const Status_1 = require("./Status");
class DataValidator {
    validate(obj) {
        if ((typeof obj['environment'] !== 'undefined') && !(DataValidator.environmentValidator.validate(obj['environment']))) {
            return false;
        }
        if ((typeof obj['appAppleId'] !== 'undefined') && !(typeof obj['appAppleId'] === "number")) {
            return false;
        }
        if ((typeof obj['bundleId'] !== 'undefined') && !(typeof obj['bundleId'] === "string" || obj['bundleId'] instanceof String)) {
            return false;
        }
        if ((typeof obj['bundleVersion'] !== 'undefined') && !(typeof obj['bundleVersion'] === "string" || obj['bundleVersion'] instanceof String)) {
            return false;
        }
        if ((typeof obj['signedTransactionInfo'] !== 'undefined') && !(typeof obj['signedTransactionInfo'] === "string" || obj['signedTransactionInfo'] instanceof String)) {
            return false;
        }
        if ((typeof obj['signedRenewalInfo'] !== 'undefined') && !(typeof obj['signedRenewalInfo'] === "string" || obj['signedRenewalInfo'] instanceof String)) {
            return false;
        }
        if ((typeof obj['status'] !== 'undefined') && !(DataValidator.statusValidator.validate(obj['status']))) {
            return false;
        }
        return true;
    }
}
exports.DataValidator = DataValidator;
DataValidator.environmentValidator = new Environment_1.EnvironmentValidator();
DataValidator.statusValidator = new Status_1.StatusValidator();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL21vZGVscy9EYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7OztBQUU1RCwrQ0FBaUU7QUFDakUscUNBQWtEO0FBNkRsRCxNQUFhLGFBQWE7SUFHdEIsUUFBUSxDQUFDLEdBQVE7UUFDYixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsYUFBYSxDQUFDLEtBQUssV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNuSCxPQUFPLEtBQUssQ0FBQTtTQUNmO1FBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLFlBQVksQ0FBQyxLQUFLLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxRQUFRLENBQUMsRUFBRTtZQUN4RixPQUFPLEtBQUssQ0FBQTtTQUNmO1FBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxRQUFRLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxZQUFZLE1BQU0sQ0FBQyxFQUFFO1lBQ3pILE9BQU8sS0FBSyxDQUFBO1NBQ2Y7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsZUFBZSxDQUFDLEtBQUssV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sR0FBRyxDQUFDLGVBQWUsQ0FBQyxLQUFLLFFBQVEsSUFBSSxHQUFHLENBQUMsZUFBZSxDQUFDLFlBQVksTUFBTSxDQUFDLEVBQUU7WUFDeEksT0FBTyxLQUFLLENBQUE7U0FDZjtRQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLFFBQVEsSUFBSSxHQUFHLENBQUMsdUJBQXVCLENBQUMsWUFBWSxNQUFNLENBQUMsRUFBRTtZQUNoSyxPQUFPLEtBQUssQ0FBQTtTQUNmO1FBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssUUFBUSxJQUFJLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLE1BQU0sQ0FBQyxFQUFFO1lBQ3BKLE9BQU8sS0FBSyxDQUFBO1NBQ2Y7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDcEcsT0FBTyxLQUFLLENBQUE7U0FDZjtRQUNELE9BQU8sSUFBSSxDQUFBO0lBQ2YsQ0FBQzs7QUExQkwsc0NBMkJDO0FBMUJtQixrQ0FBb0IsR0FBRyxJQUFJLGtDQUFvQixFQUFFLENBQUE7QUFDakQsNkJBQWUsR0FBRyxJQUFJLHdCQUFlLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAyMyBBcHBsZSBJbmMuIExpY2Vuc2VkIHVuZGVyIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQgeyBFbnZpcm9ubWVudCwgRW52aXJvbm1lbnRWYWxpZGF0b3IgfSBmcm9tIFwiLi9FbnZpcm9ubWVudFwiXG5pbXBvcnQgeyBTdGF0dXMsIFN0YXR1c1ZhbGlkYXRvciB9IGZyb20gXCIuL1N0YXR1c1wiXG5pbXBvcnQgeyBWYWxpZGF0b3IgfSBmcm9tIFwiLi9WYWxpZGF0b3JcIlxuXG4vKipcbiAqIFRoZSBhcHAgbWV0YWRhdGEgYW5kIHRoZSBzaWduZWQgcmVuZXdhbCBhbmQgdHJhbnNhY3Rpb24gaW5mb3JtYXRpb24uXG4gKlxuICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL2FwcHN0b3Jlc2VydmVybm90aWZpY2F0aW9ucy9kYXRhIGRhdGF9XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YSB7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VydmVyIGVudmlyb25tZW50IHRoYXQgdGhlIG5vdGlmaWNhdGlvbiBhcHBsaWVzIHRvLCBlaXRoZXIgc2FuZGJveCBvciBwcm9kdWN0aW9uLlxuICAgICAqXG4gICAgICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL2FwcHN0b3Jlc2VydmVybm90aWZpY2F0aW9ucy9lbnZpcm9ubWVudCBlbnZpcm9ubWVudH1cbiAgICAgKiovXG4gICAgZW52aXJvbm1lbnQ/OiBFbnZpcm9ubWVudFxuICAgICAgICBcbiAgICAvKipcbiAgICAgKiBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgYW4gYXBwIGluIHRoZSBBcHAgU3RvcmUuXG4gICAgICpcbiAgICAgKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vYXBwc3RvcmVzZXJ2ZXJub3RpZmljYXRpb25zL2FwcGFwcGxlaWQgYXBwQXBwbGVJZH1cbiAgICAgKiovXG4gICAgYXBwQXBwbGVJZD86IG51bWJlclxuICAgICAgICBcbiAgICAvKipcbiAgICAgKiBUaGUgYnVuZGxlIGlkZW50aWZpZXIgb2YgYW4gYXBwLlxuICAgICAqXG4gICAgICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL2FwcHN0b3Jlc2VydmVyYXBpL2J1bmRsZWlkIGJ1bmRsZUlkfVxuICAgICAqKi9cbiAgICBidW5kbGVJZD86IHN0cmluZ1xuICAgICAgICBcbiAgICAvKipcbiAgICAgKiBUaGUgdmVyc2lvbiBvZiB0aGUgYnVpbGQgdGhhdCBpZGVudGlmaWVzIGFuIGl0ZXJhdGlvbiBvZiB0aGUgYnVuZGxlLlxuICAgICAqXG4gICAgICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL2FwcHN0b3Jlc2VydmVybm90aWZpY2F0aW9ucy9idW5kbGV2ZXJzaW9uIGJ1bmRsZVZlcnNpb259XG4gICAgICoqL1xuICAgIGJ1bmRsZVZlcnNpb24/OiBzdHJpbmdcbiAgICAgICAgXG4gICAgLyoqXG4gICAgICogVHJhbnNhY3Rpb24gaW5mb3JtYXRpb24gc2lnbmVkIGJ5IHRoZSBBcHAgU3RvcmUsIGluIEpTT04gV2ViIFNpZ25hdHVyZSAoSldTKSBmb3JtYXQuXG4gICAgICpcbiAgICAgKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vYXBwc3RvcmVzZXJ2ZXJhcGkvandzdHJhbnNhY3Rpb24gSldTVHJhbnNhY3Rpb259XG4gICAgICoqL1xuICAgIHNpZ25lZFRyYW5zYWN0aW9uSW5mbz86IHN0cmluZ1xuICAgICAgICBcbiAgICAvKipcbiAgICAgKiBTdWJzY3JpcHRpb24gcmVuZXdhbCBpbmZvcm1hdGlvbiwgc2lnbmVkIGJ5IHRoZSBBcHAgU3RvcmUsIGluIEpTT04gV2ViIFNpZ25hdHVyZSAoSldTKSBmb3JtYXQuXG4gICAgICpcbiAgICAgKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vYXBwc3RvcmVzZXJ2ZXJhcGkvandzcmVuZXdhbGluZm8gSldTUmVuZXdhbEluZm99XG4gICAgICoqL1xuICAgIHNpZ25lZFJlbmV3YWxJbmZvPzogc3RyaW5nXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc3RhdHVzIG9mIGFuIGF1dG8tcmVuZXdhYmxlIHN1YnNjcmlwdGlvbiBhcyBvZiB0aGUgc2lnbmVkRGF0ZSBpbiB0aGUgcmVzcG9uc2VCb2R5VjJEZWNvZGVkUGF5bG9hZC5cbiAgICAgKlxuICAgICAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi9hcHBzdG9yZXNlcnZlcm5vdGlmaWNhdGlvbnMvc3RhdHVzIHN0YXR1c31cbiAgICAgKiovXG4gICAgc3RhdHVzPzogU3RhdHVzXG59XG5cblxuZXhwb3J0IGNsYXNzIERhdGFWYWxpZGF0b3IgaW1wbGVtZW50cyBWYWxpZGF0b3I8RGF0YT4ge1xuICAgIHN0YXRpYyByZWFkb25seSBlbnZpcm9ubWVudFZhbGlkYXRvciA9IG5ldyBFbnZpcm9ubWVudFZhbGlkYXRvcigpXG4gICAgc3RhdGljIHJlYWRvbmx5IHN0YXR1c1ZhbGlkYXRvciA9IG5ldyBTdGF0dXNWYWxpZGF0b3IoKVxuICAgIHZhbGlkYXRlKG9iajogYW55KTogb2JqIGlzIERhdGEge1xuICAgICAgICBpZiAoKHR5cGVvZiBvYmpbJ2Vudmlyb25tZW50J10gIT09ICd1bmRlZmluZWQnKSAmJiAhKERhdGFWYWxpZGF0b3IuZW52aXJvbm1lbnRWYWxpZGF0b3IudmFsaWRhdGUob2JqWydlbnZpcm9ubWVudCddKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIGlmICgodHlwZW9mIG9ialsnYXBwQXBwbGVJZCddICE9PSAndW5kZWZpbmVkJykgJiYgISh0eXBlb2Ygb2JqWydhcHBBcHBsZUlkJ10gPT09IFwibnVtYmVyXCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHR5cGVvZiBvYmpbJ2J1bmRsZUlkJ10gIT09ICd1bmRlZmluZWQnKSAmJiAhKHR5cGVvZiBvYmpbJ2J1bmRsZUlkJ10gPT09IFwic3RyaW5nXCIgfHwgb2JqWydidW5kbGVJZCddIGluc3RhbmNlb2YgU3RyaW5nKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh0eXBlb2Ygb2JqWydidW5kbGVWZXJzaW9uJ10gIT09ICd1bmRlZmluZWQnKSAmJiAhKHR5cGVvZiBvYmpbJ2J1bmRsZVZlcnNpb24nXSA9PT0gXCJzdHJpbmdcIiB8fCBvYmpbJ2J1bmRsZVZlcnNpb24nXSBpbnN0YW5jZW9mIFN0cmluZykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIGlmICgodHlwZW9mIG9ialsnc2lnbmVkVHJhbnNhY3Rpb25JbmZvJ10gIT09ICd1bmRlZmluZWQnKSAmJiAhKHR5cGVvZiBvYmpbJ3NpZ25lZFRyYW5zYWN0aW9uSW5mbyddID09PSBcInN0cmluZ1wiIHx8IG9ialsnc2lnbmVkVHJhbnNhY3Rpb25JbmZvJ10gaW5zdGFuY2VvZiBTdHJpbmcpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHR5cGVvZiBvYmpbJ3NpZ25lZFJlbmV3YWxJbmZvJ10gIT09ICd1bmRlZmluZWQnKSAmJiAhKHR5cGVvZiBvYmpbJ3NpZ25lZFJlbmV3YWxJbmZvJ10gPT09IFwic3RyaW5nXCIgfHwgb2JqWydzaWduZWRSZW5ld2FsSW5mbyddIGluc3RhbmNlb2YgU3RyaW5nKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh0eXBlb2Ygb2JqWydzdGF0dXMnXSAhPT0gJ3VuZGVmaW5lZCcpICYmICEoRGF0YVZhbGlkYXRvci5zdGF0dXNWYWxpZGF0b3IudmFsaWRhdGUob2JqWydzdGF0dXMnXSkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbn1cbiJdfQ==