"use strict";
// Copyright (c) 2023 Apple Inc. Licensed under MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReceiptUtility = void 0;
const jsrsasign_1 = require("jsrsasign");
const IN_APP_TYPE_ID = 17;
const TRANSACTION_IDENTIFIER_TYPE_ID = 1703;
const ORIGINAL_TRANSACTION_IDENTIFIER_TYPE_ID = 1705;
class ReceiptUtility {
    /**
     * Extracts a transaction id from an encoded App Receipt. Throws if the receipt does not match the expected format.
     * *NO validation* is performed on the receipt, and any data returned should only be used to call the App Store Server API.
     * @param appReceipt The unmodified app receipt
     * @returns A transaction id from the array of in-app purchases, null if the receipt contains no in-app purchases
     */
    extractTransactionIdFromAppReceipt(appReceipt) {
        const receiptInfo = jsrsasign_1.ASN1HEX.getVbyList(Buffer.from(appReceipt, 'base64').toString('hex'), 0, [1, 0, 2, 1, 0]);
        let index = 0;
        while (jsrsasign_1.ASN1HEX.getVbyList(receiptInfo, 0, [index, 0])) {
            const val = jsrsasign_1.ASN1HEX.getVbyList(receiptInfo, 0, [index, 0]);
            if (IN_APP_TYPE_ID === parseInt(val, 16)) {
                const inAppInfo = jsrsasign_1.ASN1HEX.getVbyList(receiptInfo, 0, [index, 2]);
                let inAppIndex = 0;
                while (jsrsasign_1.ASN1HEX.getVbyList(inAppInfo, 0, [inAppIndex, 0])) {
                    const val = jsrsasign_1.ASN1HEX.getVbyList(inAppInfo, 0, [inAppIndex, 0]);
                    if (TRANSACTION_IDENTIFIER_TYPE_ID === parseInt(val, 16) || ORIGINAL_TRANSACTION_IDENTIFIER_TYPE_ID === parseInt(val, 16)) {
                        const transactionIdUTF8String = jsrsasign_1.ASN1HEX.getVbyList(inAppInfo, 0, [inAppIndex, 2]);
                        const transactionId = jsrsasign_1.ASN1HEX.getVbyList(transactionIdUTF8String, 0, []);
                        return Buffer.from(transactionId, 'hex').toString();
                    }
                    inAppIndex = inAppIndex + 1;
                }
            }
            index = index + 1;
        }
        return null;
    }
    /**
     * Extracts a transaction id from an encoded transactional receipt. Throws if the receipt does not match the expected format.
     * *NO validation* is performed on the receipt, and any data returned should only be used to call the App Store Server API.
     * @param transactionReceipt The unmodified transactionReceipt
     * @return A transaction id, or null if no transactionId is found in the receipt
     */
    extractTransactionIdFromTransactionReceipt(transactionReceipt) {
        const topLevel = Buffer.from(transactionReceipt, 'base64').toString();
        const topLevelRegex = /"purchase-info"\s+=\s+"([a-zA-Z0-9+/=]+)";/;
        const topLevelMatchResult = topLevel.match(topLevelRegex);
        if (!topLevelMatchResult || topLevelMatchResult?.length !== 2) {
            return null;
        }
        const purchaseInfo = Buffer.from(topLevelMatchResult[1], 'base64').toString();
        const purchaseInfoRegex = /"transaction-id"\s+=\s+"([a-zA-Z0-9+/=]+)";/;
        const purchaseInfoMatchResult = purchaseInfo.match(purchaseInfoRegex);
        if (!purchaseInfoMatchResult || purchaseInfoMatchResult?.length !== 2) {
            return null;
        }
        return purchaseInfoMatchResult[1];
    }
}
exports.ReceiptUtility = ReceiptUtility;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjZWlwdF91dGlsaXR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vcmVjZWlwdF91dGlsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0REFBNEQ7OztBQUU1RCx5Q0FBb0M7QUFFcEMsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDO0FBQzFCLE1BQU0sOEJBQThCLEdBQUcsSUFBSSxDQUFDO0FBQzVDLE1BQU0sdUNBQXVDLEdBQUcsSUFBSSxDQUFDO0FBRXJELE1BQWEsY0FBYztJQUV2Qjs7Ozs7T0FLRztJQUNILGtDQUFrQyxDQUFDLFVBQWtCO1FBQ2pELE1BQU0sV0FBVyxHQUFHLG1CQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQVcsQ0FBQTtRQUN2SCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxPQUFNLG1CQUFPLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNsRCxNQUFNLEdBQUcsR0FBRyxtQkFBTyxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFXLENBQUE7WUFDcEUsSUFBSSxjQUFjLEtBQUssUUFBUSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDdEMsTUFBTSxTQUFTLEdBQUcsbUJBQU8sQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBVyxDQUFBO2dCQUMxRSxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7Z0JBQ25CLE9BQU0sbUJBQU8sQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNyRCxNQUFNLEdBQUcsR0FBRyxtQkFBTyxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFXLENBQUE7b0JBQ3ZFLElBQUksOEJBQThCLEtBQUssUUFBUSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSx1Q0FBdUMsS0FBSyxRQUFRLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFO3dCQUN2SCxNQUFNLHVCQUF1QixHQUFHLG1CQUFPLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQVcsQ0FBQTt3QkFDM0YsTUFBTSxhQUFhLEdBQUcsbUJBQU8sQ0FBQyxVQUFVLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBVyxDQUFBO3dCQUNsRixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFBO3FCQUN0RDtvQkFDRCxVQUFVLEdBQUcsVUFBVSxHQUFHLENBQUMsQ0FBQTtpQkFDOUI7YUFDSjtZQUNELEtBQUssR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFBO1NBQ3BCO1FBQ0QsT0FBTyxJQUFJLENBQUE7SUFDZixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCwwQ0FBMEMsQ0FBQyxrQkFBMEI7UUFDakUsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxRQUFRLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQTtRQUNyRSxNQUFNLGFBQWEsR0FBRyw0Q0FBNEMsQ0FBQTtRQUNsRSxNQUFNLG1CQUFtQixHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUE7UUFDekQsSUFBSSxDQUFDLG1CQUFtQixJQUFJLG1CQUFtQixFQUFFLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDM0QsT0FBTyxJQUFJLENBQUE7U0FDZDtRQUVELE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUE7UUFDN0UsTUFBTSxpQkFBaUIsR0FBRyw2Q0FBNkMsQ0FBQTtRQUN2RSxNQUFNLHVCQUF1QixHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtRQUNyRSxJQUFJLENBQUMsdUJBQXVCLElBQUksdUJBQXVCLEVBQUUsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNuRSxPQUFPLElBQUksQ0FBQTtTQUNkO1FBQ0QsT0FBTyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNyQyxDQUFDO0NBQ0o7QUFyREQsd0NBcURDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDIzIEFwcGxlIEluYy4gTGljZW5zZWQgdW5kZXIgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7IEFTTjFIRVggfSBmcm9tICdqc3JzYXNpZ24nO1xuXG5jb25zdCBJTl9BUFBfVFlQRV9JRCA9IDE3O1xuY29uc3QgVFJBTlNBQ1RJT05fSURFTlRJRklFUl9UWVBFX0lEID0gMTcwMztcbmNvbnN0IE9SSUdJTkFMX1RSQU5TQUNUSU9OX0lERU5USUZJRVJfVFlQRV9JRCA9IDE3MDU7XG5cbmV4cG9ydCBjbGFzcyBSZWNlaXB0VXRpbGl0eSB7XG4gICAgXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgYSB0cmFuc2FjdGlvbiBpZCBmcm9tIGFuIGVuY29kZWQgQXBwIFJlY2VpcHQuIFRocm93cyBpZiB0aGUgcmVjZWlwdCBkb2VzIG5vdCBtYXRjaCB0aGUgZXhwZWN0ZWQgZm9ybWF0LlxuICAgICAqICpOTyB2YWxpZGF0aW9uKiBpcyBwZXJmb3JtZWQgb24gdGhlIHJlY2VpcHQsIGFuZCBhbnkgZGF0YSByZXR1cm5lZCBzaG91bGQgb25seSBiZSB1c2VkIHRvIGNhbGwgdGhlIEFwcCBTdG9yZSBTZXJ2ZXIgQVBJLlxuICAgICAqIEBwYXJhbSBhcHBSZWNlaXB0IFRoZSB1bm1vZGlmaWVkIGFwcCByZWNlaXB0XG4gICAgICogQHJldHVybnMgQSB0cmFuc2FjdGlvbiBpZCBmcm9tIHRoZSBhcnJheSBvZiBpbi1hcHAgcHVyY2hhc2VzLCBudWxsIGlmIHRoZSByZWNlaXB0IGNvbnRhaW5zIG5vIGluLWFwcCBwdXJjaGFzZXNcbiAgICAgKi9cbiAgICBleHRyYWN0VHJhbnNhY3Rpb25JZEZyb21BcHBSZWNlaXB0KGFwcFJlY2VpcHQ6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgICAgICBjb25zdCByZWNlaXB0SW5mbyA9IEFTTjFIRVguZ2V0VmJ5TGlzdChCdWZmZXIuZnJvbShhcHBSZWNlaXB0LCAnYmFzZTY0JykudG9TdHJpbmcoJ2hleCcpLCAwLCBbMSwgMCwgMiwgMSwgMF0pIGFzIHN0cmluZ1xuICAgICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgICB3aGlsZShBU04xSEVYLmdldFZieUxpc3QocmVjZWlwdEluZm8sIDAsIFtpbmRleCwgMF0pKSB7XG4gICAgICAgICAgICBjb25zdCB2YWwgPSBBU04xSEVYLmdldFZieUxpc3QocmVjZWlwdEluZm8sIDAsIFtpbmRleCwgMF0pIGFzIHN0cmluZ1xuICAgICAgICAgICAgaWYgKElOX0FQUF9UWVBFX0lEID09PSBwYXJzZUludCh2YWwsIDE2KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluQXBwSW5mbyA9IEFTTjFIRVguZ2V0VmJ5TGlzdChyZWNlaXB0SW5mbywgMCwgW2luZGV4LCAyXSkgYXMgc3RyaW5nXG4gICAgICAgICAgICAgICAgbGV0IGluQXBwSW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIHdoaWxlKEFTTjFIRVguZ2V0VmJ5TGlzdChpbkFwcEluZm8sIDAsIFtpbkFwcEluZGV4LCAwXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsID0gQVNOMUhFWC5nZXRWYnlMaXN0KGluQXBwSW5mbywgMCwgW2luQXBwSW5kZXgsIDBdKSBhcyBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgaWYgKFRSQU5TQUNUSU9OX0lERU5USUZJRVJfVFlQRV9JRCA9PT0gcGFyc2VJbnQodmFsLCAxNikgfHwgT1JJR0lOQUxfVFJBTlNBQ1RJT05fSURFTlRJRklFUl9UWVBFX0lEID09PSBwYXJzZUludCh2YWwsIDE2KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNhY3Rpb25JZFVURjhTdHJpbmcgPSBBU04xSEVYLmdldFZieUxpc3QoaW5BcHBJbmZvLCAwLCBbaW5BcHBJbmRleCwgMl0pIGFzIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNhY3Rpb25JZCA9IEFTTjFIRVguZ2V0VmJ5TGlzdCh0cmFuc2FjdGlvbklkVVRGOFN0cmluZywgMCwgW10pIGFzIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRyYW5zYWN0aW9uSWQsICdoZXgnKS50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaW5BcHBJbmRleCA9IGluQXBwSW5kZXggKyAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5kZXggPSBpbmRleCArIDFcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIGEgdHJhbnNhY3Rpb24gaWQgZnJvbSBhbiBlbmNvZGVkIHRyYW5zYWN0aW9uYWwgcmVjZWlwdC4gVGhyb3dzIGlmIHRoZSByZWNlaXB0IGRvZXMgbm90IG1hdGNoIHRoZSBleHBlY3RlZCBmb3JtYXQuXG4gICAgICogKk5PIHZhbGlkYXRpb24qIGlzIHBlcmZvcm1lZCBvbiB0aGUgcmVjZWlwdCwgYW5kIGFueSBkYXRhIHJldHVybmVkIHNob3VsZCBvbmx5IGJlIHVzZWQgdG8gY2FsbCB0aGUgQXBwIFN0b3JlIFNlcnZlciBBUEkuXG4gICAgICogQHBhcmFtIHRyYW5zYWN0aW9uUmVjZWlwdCBUaGUgdW5tb2RpZmllZCB0cmFuc2FjdGlvblJlY2VpcHRcbiAgICAgKiBAcmV0dXJuIEEgdHJhbnNhY3Rpb24gaWQsIG9yIG51bGwgaWYgbm8gdHJhbnNhY3Rpb25JZCBpcyBmb3VuZCBpbiB0aGUgcmVjZWlwdFxuICAgICAqL1xuICAgIGV4dHJhY3RUcmFuc2FjdGlvbklkRnJvbVRyYW5zYWN0aW9uUmVjZWlwdCh0cmFuc2FjdGlvblJlY2VpcHQ6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgICAgICBjb25zdCB0b3BMZXZlbCA9IEJ1ZmZlci5mcm9tKHRyYW5zYWN0aW9uUmVjZWlwdCwgJ2Jhc2U2NCcpLnRvU3RyaW5nKClcbiAgICAgICAgY29uc3QgdG9wTGV2ZWxSZWdleCA9IC9cInB1cmNoYXNlLWluZm9cIlxccys9XFxzK1wiKFthLXpBLVowLTkrLz1dKylcIjsvXG4gICAgICAgIGNvbnN0IHRvcExldmVsTWF0Y2hSZXN1bHQgPSB0b3BMZXZlbC5tYXRjaCh0b3BMZXZlbFJlZ2V4KSAgICAgICAgXG4gICAgICAgIGlmICghdG9wTGV2ZWxNYXRjaFJlc3VsdCB8fCB0b3BMZXZlbE1hdGNoUmVzdWx0Py5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHB1cmNoYXNlSW5mbyA9IEJ1ZmZlci5mcm9tKHRvcExldmVsTWF0Y2hSZXN1bHRbMV0sICdiYXNlNjQnKS50b1N0cmluZygpXG4gICAgICAgIGNvbnN0IHB1cmNoYXNlSW5mb1JlZ2V4ID0gL1widHJhbnNhY3Rpb24taWRcIlxccys9XFxzK1wiKFthLXpBLVowLTkrLz1dKylcIjsvXG4gICAgICAgIGNvbnN0IHB1cmNoYXNlSW5mb01hdGNoUmVzdWx0ID0gcHVyY2hhc2VJbmZvLm1hdGNoKHB1cmNoYXNlSW5mb1JlZ2V4KVxuICAgICAgICBpZiAoIXB1cmNoYXNlSW5mb01hdGNoUmVzdWx0IHx8IHB1cmNoYXNlSW5mb01hdGNoUmVzdWx0Py5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHB1cmNoYXNlSW5mb01hdGNoUmVzdWx0WzFdXG4gICAgfVxufVxuIl19